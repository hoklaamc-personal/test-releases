name: Merge Deploy PR

on:
  issue_comment:
    types: [created]

jobs:
  approve:
    name: Approve deploy pull request
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.TEST_APP_ID }}
          private_key: ${{ secrets.TEST_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Deploy pull request merge triggered by ${{ github.event.comment.user.name }}
      - uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            // Check if PR is created by bot
            const pull = (await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })).data;
            const isBotPR = pull.user.type === 'Bot';

            // Check if commenter is in platform-frontend-deployers team
            const approvedUsers = (await github.rest.teams.listMembersInOrg({
              org: 'hoklaamc-personal',
              team_slug: 'platform-frontend-deployers'
            })).data;
            const approvedUsersLogins = approvedUsers.map(user => user.login);
            const commenter = context.payload.sender.login;
            const isCommenterApproved = approvedUsersLogins.includes(commenter);
            if (isBotPR && isCommenterApproved) {
              github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'merge'
              });
            } else {
              console.log('This PR cannot be merged with the !merge command.');
            }
            
