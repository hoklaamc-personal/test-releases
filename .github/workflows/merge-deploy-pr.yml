name: Merge Deploy PR

on:
  pull_request:
    branches: [main]
    types: [opened]

jobs:
  deploy:
    name: Weekly Deploy Auto Merge
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ github.event.sender.login }}"
      - name: Generate GitHub App token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TEST_APP_ID }}
          private-key: ${{ secrets.TEST_APP_PRIVATE_KEY }}
      - name: Wait for Checks to Pass
        id: wait_for_checks
        uses: poseidon/wait-for-status-checks@v0.4.1
        with:
          token: ${{ steps.generate_token.outputs.token }}
          delay: 10
          interval: 30
          ignore: "Weekly Deploy Auto Merge"
      # - name: Merge
      #   id: merge
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ steps.generate_token.outputs.token }}
      #     script: |
      #       github.rest.pulls.merge({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.issue.number,
      #         merge_method: 'merge'
      #       });

# on:
#   issue_comment:
#     types: [created]

# jobs:
#   approve:
#     name: Approve deploy pull request
#     if: ${{ github.event.issue.pull_request && github.event.comment.body == '!merge' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Generate GitHub App token
#         id: generate_token
#         uses: actions/create-github-app-token@v1
#         with:
#           app-id: ${{ secrets.TEST_APP_ID }}
#           private-key: ${{ secrets.TEST_APP_PRIVATE_KEY }}
#       - uses: actions/checkout@v4
#       - name: Check permissions
#         id: check_permissions
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ steps.generate_token.outputs.token }}
#           script: |
#             // Check if PR is created by bot
#             const pull = (await github.rest.pulls.get({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               pull_number: context.issue.number
#             })).data;
#             const isBotPR = pull.user.type === 'Bot';

#             // Check if commenter is in platform-frontend-deployers team
#             const approvedUsers = (await github.rest.teams.listMembersInOrg({
#               org: 'hoklaamc-personal',
#               team_slug: 'platform-frontend-deployers'
#             })).data;
#             const approvedUsersLogins = approvedUsers.map(user => user.login);
#             const commenter = context.payload.sender.login;
#             const isCommenterApproved = approvedUsersLogins.includes(commenter);
#             return isBotPR && isCommenterApproved;
#       - name: Comment PR
#         if: ${{ steps.check_permissions.outputs.result == 'true' }}
#         uses: thollander/actions-comment-pull-request@v2
#         with:
#           GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
#           message: Deploy pull request merge requested.
#       - name: Merge
#         id: merge
#         if: ${{ steps.check_permissions.outputs.result == 'true' }}
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ steps.generate_token.outputs.token }}
#           script: |
#             github.rest.pulls.merge({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               pull_number: context.issue.number,
#               merge_method: 'merge'
#             });
#             return 0;
#       - name: Unauthorized merge comment
#         uses: thollander/actions-comment-pull-request@v2
#         if: ${{ steps.check_permissions.outputs.result != 'true' }}
#         with:
#           GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
#           message: You do not have permissions to trigger a merge for this pull request.
            
